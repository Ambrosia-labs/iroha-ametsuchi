include "asset.fbs";
include "account.fbs";
include "key.fbs";
include "primitives.fbs";

namespace iroha;

// we union only those objects.
// they share the same commands
union Object { Peer, Account, Chaincode }
union AnyAsset { Asset, Currency }

table Add {
    object: Object (required);
}

table Remove {
    object: Object (required);
}



// users are able to store custom data in their accounts
table Store {
    accPubKey: PublicKey        (required);
    data:      [KeyValueObject] (required);
}


table Transfer {
    currency: Asset     (required);
    sender:   PublicKey (required);
    receiver: PublicKey (required);
}

//////////////////////////////////////////
/// Commands for Asset

// logically means asset summation
table AddAsset {
    accPubKey: PublicKey (required);
    asset:     [Asset]   (required);
}

// logically means asset negation
table RemoveAsset {
    accPubKey: PublicKey (required);
    asset:     [Asset]   (required);
}

// needed to implement correct permission model:
// user may have permission to add asset, but not to create and vice versa.
table CreateAsset {
    asset_name:  string (required);
    domain_name: string (required);
    ledger_name: string (required);

    description: string;
}
//////////////////////////////////////////


//////////////////////////////////////////
/// Commands for Chaincode
table Execute {
  code_name:   string  (required);
  domain_name: string  (required);
  ledger_name: string  (required);
}


// consider chaincode storage as key-value map
table SetChaincode {
    chaincode: Chaincode (required);
}
//////////////////////////////////////////


//////////////////////////////////////////
/// Commands for Peer

// set new peer trust (with specific value)
table SetPeerTrust {
    peerPubKey: PublicKey (required);
    trust:      double;
}

// change current trust to some delta
// example: delta=-5, trust=10 -> newTrust = 10-5 = 5
table ChangePeerTrust {
    peerPubKey: PublicKey (required);
    delta:      double;
}

table SetPeerActive {
    peerPubKey: PublicKey (required);
    active:     bool;
}
//////////////////////////////////////////


//////////////////////////////////////////
/// Commands for Account
table AddSignatory {
    account:   PublicKey   (required);
    signatory: [PublicKey] (required);
}

table SetAccountsUseKeys {
    accounts: [PublicKey] (required);
    useKeys:  ushort;
}
//////////////////////////////////////////


union Command {
    AddAsset,
    RemoveAsset,
    CreateAsset,
    Transfer,

    Add,
    Remove,
    Execute,
    Store,

    SetPeerTrust,
    ChangePeerTrust,
    SetPeerActive,
    SetChaincode
}
