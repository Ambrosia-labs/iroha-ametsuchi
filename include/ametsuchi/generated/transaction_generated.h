// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRANSACTION_IROHA_API_H_
#define FLATBUFFERS_GENERATED_TRANSACTION_IROHA_API_H_

#include "flatbuffers/flatbuffers.h"

#include "account_generated.h"
#include "asset_generated.h"
#include "commands_generated.h"
#include "key_generated.h"
#include "primitives_generated.h"

namespace iroha {
namespace api {

struct Transaction;

struct Attachment;

struct Transaction FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_CREATORPUBKEY = 4,
    VT_COMMAND_TYPE = 6,
    VT_COMMAND = 8,
    VT_SIGNATURES = 10,
    VT_HASH = 12,
    VT_ATTACHMENT = 14
  };
  const iroha::api::PublicKey *creatorPubKey() const {
    return GetPointer<const iroha::api::PublicKey *>(VT_CREATORPUBKEY);
  }
  iroha::api::Command command_type() const {
    return static_cast<iroha::api::Command>(GetField<uint8_t>(VT_COMMAND_TYPE, 0));
  }
  const void *command() const {
    return GetPointer<const void *>(VT_COMMAND);
  }
  template<typename T> const T *command_as() const;
  const iroha::api::Add *command_as_Add() const {
    return (command_type() == iroha::api::Command::Add)? static_cast<const iroha::api::Add *>(command()) : nullptr;
  }
  const iroha::api::Remove *command_as_Remove() const {
    return (command_type() == iroha::api::Command::Remove)? static_cast<const iroha::api::Remove *>(command()) : nullptr;
  }
  const iroha::api::Transfer *command_as_Transfer() const {
    return (command_type() == iroha::api::Command::Transfer)? static_cast<const iroha::api::Transfer *>(command()) : nullptr;
  }
  const iroha::api::Execute *command_as_Execute() const {
    return (command_type() == iroha::api::Command::Execute)? static_cast<const iroha::api::Execute *>(command()) : nullptr;
  }
  const iroha::api::Create *command_as_Create() const {
    return (command_type() == iroha::api::Command::Create)? static_cast<const iroha::api::Create *>(command()) : nullptr;
  }
  const iroha::api::Store *command_as_Store() const {
    return (command_type() == iroha::api::Command::Store)? static_cast<const iroha::api::Store *>(command()) : nullptr;
  }
  const iroha::api::SetPeerTrust *command_as_SetPeerTrust() const {
    return (command_type() == iroha::api::Command::SetPeerTrust)? static_cast<const iroha::api::SetPeerTrust *>(command()) : nullptr;
  }
  const iroha::api::ChangePeerTrust *command_as_ChangePeerTrust() const {
    return (command_type() == iroha::api::Command::ChangePeerTrust)? static_cast<const iroha::api::ChangePeerTrust *>(command()) : nullptr;
  }
  const iroha::api::SetPeerActive *command_as_SetPeerActive() const {
    return (command_type() == iroha::api::Command::SetPeerActive)? static_cast<const iroha::api::SetPeerActive *>(command()) : nullptr;
  }
  const iroha::api::SetChaincode *command_as_SetChaincode() const {
    return (command_type() == iroha::api::Command::SetChaincode)? static_cast<const iroha::api::SetChaincode *>(command()) : nullptr;
  }
  const flatbuffers::Vector<flatbuffers::Offset<iroha::api::Signature>> *signatures() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<iroha::api::Signature>> *>(VT_SIGNATURES);
  }
  const flatbuffers::Vector<uint8_t> *hash() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_HASH);
  }
  const Attachment *attachment() const {
    return GetPointer<const Attachment *>(VT_ATTACHMENT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<flatbuffers::uoffset_t>(verifier, VT_CREATORPUBKEY) &&
           verifier.VerifyTable(creatorPubKey()) &&
           VerifyField<uint8_t>(verifier, VT_COMMAND_TYPE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_COMMAND) &&
           VerifyCommand(verifier, command(), command_type()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SIGNATURES) &&
           verifier.Verify(signatures()) &&
           verifier.VerifyVectorOfTables(signatures()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_HASH) &&
           verifier.Verify(hash()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_ATTACHMENT) &&
           verifier.VerifyTable(attachment()) &&
           verifier.EndTable();
  }
};

template<> inline const iroha::api::Add *Transaction::command_as<iroha::api::Add>() const {
  return command_as_Add();
}

template<> inline const iroha::api::Remove *Transaction::command_as<iroha::api::Remove>() const {
  return command_as_Remove();
}

template<> inline const iroha::api::Transfer *Transaction::command_as<iroha::api::Transfer>() const {
  return command_as_Transfer();
}

template<> inline const iroha::api::Execute *Transaction::command_as<iroha::api::Execute>() const {
  return command_as_Execute();
}

template<> inline const iroha::api::Create *Transaction::command_as<iroha::api::Create>() const {
  return command_as_Create();
}

template<> inline const iroha::api::Store *Transaction::command_as<iroha::api::Store>() const {
  return command_as_Store();
}

template<> inline const iroha::api::SetPeerTrust *Transaction::command_as<iroha::api::SetPeerTrust>() const {
  return command_as_SetPeerTrust();
}

template<> inline const iroha::api::ChangePeerTrust *Transaction::command_as<iroha::api::ChangePeerTrust>() const {
  return command_as_ChangePeerTrust();
}

template<> inline const iroha::api::SetPeerActive *Transaction::command_as<iroha::api::SetPeerActive>() const {
  return command_as_SetPeerActive();
}

template<> inline const iroha::api::SetChaincode *Transaction::command_as<iroha::api::SetChaincode>() const {
  return command_as_SetChaincode();
}

struct TransactionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_creatorPubKey(flatbuffers::Offset<iroha::api::PublicKey> creatorPubKey) {
    fbb_.AddOffset(Transaction::VT_CREATORPUBKEY, creatorPubKey);
  }
  void add_command_type(iroha::api::Command command_type) {
    fbb_.AddElement<uint8_t>(Transaction::VT_COMMAND_TYPE, static_cast<uint8_t>(command_type), 0);
  }
  void add_command(flatbuffers::Offset<void> command) {
    fbb_.AddOffset(Transaction::VT_COMMAND, command);
  }
  void add_signatures(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<iroha::api::Signature>>> signatures) {
    fbb_.AddOffset(Transaction::VT_SIGNATURES, signatures);
  }
  void add_hash(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> hash) {
    fbb_.AddOffset(Transaction::VT_HASH, hash);
  }
  void add_attachment(flatbuffers::Offset<Attachment> attachment) {
    fbb_.AddOffset(Transaction::VT_ATTACHMENT, attachment);
  }
  TransactionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TransactionBuilder &operator=(const TransactionBuilder &);
  flatbuffers::Offset<Transaction> Finish() {
    const auto end = fbb_.EndTable(start_, 6);
    auto o = flatbuffers::Offset<Transaction>(end);
    fbb_.Required(o, Transaction::VT_CREATORPUBKEY);
    return o;
  }
};

inline flatbuffers::Offset<Transaction> CreateTransaction(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<iroha::api::PublicKey> creatorPubKey = 0,
    iroha::api::Command command_type = iroha::api::Command::NONE,
    flatbuffers::Offset<void> command = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<iroha::api::Signature>>> signatures = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> hash = 0,
    flatbuffers::Offset<Attachment> attachment = 0) {
  TransactionBuilder builder_(_fbb);
  builder_.add_attachment(attachment);
  builder_.add_hash(hash);
  builder_.add_signatures(signatures);
  builder_.add_command(command);
  builder_.add_creatorPubKey(creatorPubKey);
  builder_.add_command_type(command_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Transaction> CreateTransactionDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<iroha::api::PublicKey> creatorPubKey = 0,
    iroha::api::Command command_type = iroha::api::Command::NONE,
    flatbuffers::Offset<void> command = 0,
    const std::vector<flatbuffers::Offset<iroha::api::Signature>> *signatures = nullptr,
    const std::vector<uint8_t> *hash = nullptr,
    flatbuffers::Offset<Attachment> attachment = 0) {
  return iroha::api::CreateTransaction(
      _fbb,
      creatorPubKey,
      command_type,
      command,
      signatures ? _fbb.CreateVector<flatbuffers::Offset<iroha::api::Signature>>(*signatures) : 0,
      hash ? _fbb.CreateVector<uint8_t>(*hash) : 0,
      attachment);
}

struct Attachment FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MIME = 4,
    VT_DATA = 6
  };
  const flatbuffers::String *mime() const {
    return GetPointer<const flatbuffers::String *>(VT_MIME);
  }
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MIME) &&
           verifier.Verify(mime()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct AttachmentBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_mime(flatbuffers::Offset<flatbuffers::String> mime) {
    fbb_.AddOffset(Attachment::VT_MIME, mime);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Attachment::VT_DATA, data);
  }
  AttachmentBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AttachmentBuilder &operator=(const AttachmentBuilder &);
  flatbuffers::Offset<Attachment> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Attachment>(end);
    return o;
  }
};

inline flatbuffers::Offset<Attachment> CreateAttachment(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> mime = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  AttachmentBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_mime(mime);
  return builder_.Finish();
}

inline flatbuffers::Offset<Attachment> CreateAttachmentDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *mime = nullptr,
    const std::vector<uint8_t> *data = nullptr) {
  return iroha::api::CreateAttachment(
      _fbb,
      mime ? _fbb.CreateString(mime) : 0,
      data ? _fbb.CreateVector<uint8_t>(*data) : 0);
}

}  // namespace api
}  // namespace iroha

#endif  // FLATBUFFERS_GENERATED_TRANSACTION_IROHA_API_H_
