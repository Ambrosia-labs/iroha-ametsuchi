// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAIN_IROHA_API_H_
#define FLATBUFFERS_GENERATED_MAIN_IROHA_API_H_

#include "flatbuffers/flatbuffers.h"

#include "account_generated.h"
#include "asset_generated.h"
#include "commands_generated.h"
#include "key_generated.h"
#include "primitives_generated.h"
#include "transaction_generated.h"

namespace iroha {
namespace api {

struct ConsensusEvent;

struct TransactionResponse;

struct RecieverConfirmation;

struct Response;

enum class Code : uint8_t {
  COMMIT = 0,
  FAIL = 1,
  MIN = COMMIT,
  MAX = FAIL
};

inline const char **EnumNamesCode() {
  static const char *names[] = {
    "COMMIT",
    "FAIL",
    nullptr
  };
  return names;
}

inline const char *EnumNameCode(Code e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesCode()[index];
}

struct ConsensusEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PEERSIGNATURES = 4,
    VT_TRANSACTIONS = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<iroha::api::Signature>> *peerSignatures() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<iroha::api::Signature>> *>(VT_PEERSIGNATURES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<iroha::api::Transaction>> *transactions() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<iroha::api::Transaction>> *>(VT_TRANSACTIONS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_PEERSIGNATURES) &&
           verifier.Verify(peerSignatures()) &&
           verifier.VerifyVectorOfTables(peerSignatures()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TRANSACTIONS) &&
           verifier.Verify(transactions()) &&
           verifier.VerifyVectorOfTables(transactions()) &&
           verifier.EndTable();
  }
};

struct ConsensusEventBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_peerSignatures(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<iroha::api::Signature>>> peerSignatures) {
    fbb_.AddOffset(ConsensusEvent::VT_PEERSIGNATURES, peerSignatures);
  }
  void add_transactions(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<iroha::api::Transaction>>> transactions) {
    fbb_.AddOffset(ConsensusEvent::VT_TRANSACTIONS, transactions);
  }
  ConsensusEventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ConsensusEventBuilder &operator=(const ConsensusEventBuilder &);
  flatbuffers::Offset<ConsensusEvent> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<ConsensusEvent>(end);
    return o;
  }
};

inline flatbuffers::Offset<ConsensusEvent> CreateConsensusEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<iroha::api::Signature>>> peerSignatures = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<iroha::api::Transaction>>> transactions = 0) {
  ConsensusEventBuilder builder_(_fbb);
  builder_.add_transactions(transactions);
  builder_.add_peerSignatures(peerSignatures);
  return builder_.Finish();
}

inline flatbuffers::Offset<ConsensusEvent> CreateConsensusEventDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<iroha::api::Signature>> *peerSignatures = nullptr,
    const std::vector<flatbuffers::Offset<iroha::api::Transaction>> *transactions = nullptr) {
  return iroha::api::CreateConsensusEvent(
      _fbb,
      peerSignatures ? _fbb.CreateVector<flatbuffers::Offset<iroha::api::Signature>>(*peerSignatures) : 0,
      transactions ? _fbb.CreateVector<flatbuffers::Offset<iroha::api::Transaction>>(*transactions) : 0);
}

struct TransactionResponse FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MESSAGE = 4,
    VT_CODE = 6,
    VT_TRANSACTION = 8
  };
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  Code code() const {
    return static_cast<Code>(GetField<uint8_t>(VT_CODE, 0));
  }
  const iroha::api::Transaction *transaction() const {
    return GetPointer<const iroha::api::Transaction *>(VT_TRANSACTION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MESSAGE) &&
           verifier.Verify(message()) &&
           VerifyField<uint8_t>(verifier, VT_CODE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_TRANSACTION) &&
           verifier.VerifyTable(transaction()) &&
           verifier.EndTable();
  }
};

struct TransactionResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(TransactionResponse::VT_MESSAGE, message);
  }
  void add_code(Code code) {
    fbb_.AddElement<uint8_t>(TransactionResponse::VT_CODE, static_cast<uint8_t>(code), 0);
  }
  void add_transaction(flatbuffers::Offset<iroha::api::Transaction> transaction) {
    fbb_.AddOffset(TransactionResponse::VT_TRANSACTION, transaction);
  }
  TransactionResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TransactionResponseBuilder &operator=(const TransactionResponseBuilder &);
  flatbuffers::Offset<TransactionResponse> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<TransactionResponse>(end);
    return o;
  }
};

inline flatbuffers::Offset<TransactionResponse> CreateTransactionResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> message = 0,
    Code code = Code::COMMIT,
    flatbuffers::Offset<iroha::api::Transaction> transaction = 0) {
  TransactionResponseBuilder builder_(_fbb);
  builder_.add_transaction(transaction);
  builder_.add_message(message);
  builder_.add_code(code);
  return builder_.Finish();
}

inline flatbuffers::Offset<TransactionResponse> CreateTransactionResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *message = nullptr,
    Code code = Code::COMMIT,
    flatbuffers::Offset<iroha::api::Transaction> transaction = 0) {
  return iroha::api::CreateTransactionResponse(
      _fbb,
      message ? _fbb.CreateString(message) : 0,
      code,
      transaction);
}

struct RecieverConfirmation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_SIGNATURE = 4,
    VT_HASH = 6
  };
  const iroha::api::Signature *signature() const {
    return GetPointer<const iroha::api::Signature *>(VT_SIGNATURE);
  }
  const flatbuffers::Vector<uint8_t> *hash() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_HASH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SIGNATURE) &&
           verifier.VerifyTable(signature()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_HASH) &&
           verifier.Verify(hash()) &&
           verifier.EndTable();
  }
};

struct RecieverConfirmationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_signature(flatbuffers::Offset<iroha::api::Signature> signature) {
    fbb_.AddOffset(RecieverConfirmation::VT_SIGNATURE, signature);
  }
  void add_hash(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> hash) {
    fbb_.AddOffset(RecieverConfirmation::VT_HASH, hash);
  }
  RecieverConfirmationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RecieverConfirmationBuilder &operator=(const RecieverConfirmationBuilder &);
  flatbuffers::Offset<RecieverConfirmation> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<RecieverConfirmation>(end);
    return o;
  }
};

inline flatbuffers::Offset<RecieverConfirmation> CreateRecieverConfirmation(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<iroha::api::Signature> signature = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> hash = 0) {
  RecieverConfirmationBuilder builder_(_fbb);
  builder_.add_hash(hash);
  builder_.add_signature(signature);
  return builder_.Finish();
}

inline flatbuffers::Offset<RecieverConfirmation> CreateRecieverConfirmationDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<iroha::api::Signature> signature = 0,
    const std::vector<uint8_t> *hash = nullptr) {
  return iroha::api::CreateRecieverConfirmation(
      _fbb,
      signature,
      hash ? _fbb.CreateVector<uint8_t>(*hash) : 0);
}

struct Response FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MESSAGE_TYPE = 4,
    VT_MESSAGE = 6,
    VT_CODE = 8,
    VT_SIGNATURE = 10
  };
  const flatbuffers::Vector<uint8_t> *message_type() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_MESSAGE_TYPE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<void>> *message() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<void>> *>(VT_MESSAGE);
  }
  Code code() const {
    return static_cast<Code>(GetField<uint8_t>(VT_CODE, 0));
  }
  const iroha::api::Signature *signature() const {
    return GetPointer<const iroha::api::Signature *>(VT_SIGNATURE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MESSAGE_TYPE) &&
           verifier.Verify(message_type()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_MESSAGE) &&
           verifier.Verify(message()) &&
           VerifyObjectVector(verifier, message(), message_type()) &&
           VerifyField<uint8_t>(verifier, VT_CODE) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_SIGNATURE) &&
           verifier.VerifyTable(signature()) &&
           verifier.EndTable();
  }
};

struct ResponseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message_type(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> message_type) {
    fbb_.AddOffset(Response::VT_MESSAGE_TYPE, message_type);
  }
  void add_message(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> message) {
    fbb_.AddOffset(Response::VT_MESSAGE, message);
  }
  void add_code(Code code) {
    fbb_.AddElement<uint8_t>(Response::VT_CODE, static_cast<uint8_t>(code), 0);
  }
  void add_signature(flatbuffers::Offset<iroha::api::Signature> signature) {
    fbb_.AddOffset(Response::VT_SIGNATURE, signature);
  }
  ResponseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResponseBuilder &operator=(const ResponseBuilder &);
  flatbuffers::Offset<Response> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<Response>(end);
    return o;
  }
};

inline flatbuffers::Offset<Response> CreateResponse(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> message_type = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<void>>> message = 0,
    Code code = Code::COMMIT,
    flatbuffers::Offset<iroha::api::Signature> signature = 0) {
  ResponseBuilder builder_(_fbb);
  builder_.add_signature(signature);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  builder_.add_code(code);
  return builder_.Finish();
}

inline flatbuffers::Offset<Response> CreateResponseDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *message_type = nullptr,
    const std::vector<flatbuffers::Offset<void>> *message = nullptr,
    Code code = Code::COMMIT,
    flatbuffers::Offset<iroha::api::Signature> signature = 0) {
  return iroha::api::CreateResponse(
      _fbb,
      message_type ? _fbb.CreateVector<uint8_t>(*message_type) : 0,
      message ? _fbb.CreateVector<flatbuffers::Offset<void>>(*message) : 0,
      code,
      signature);
}

}  // namespace api
}  // namespace iroha

#endif  // FLATBUFFERS_GENERATED_MAIN_IROHA_API_H_
